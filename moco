#!/usr/bin/env bash
# syntax: moco <amount> <from> {to}



declare -r API_KEY='e29d7cafb2376f82e1bb' # needed for api validation
declare amount
declare from_currency
declare -a to_currencies


declare -a currencies=(aed afn all amd ang aoa ars aud awg azn bam bbd bdt bgn bhd bif
bmd bnd bob brl bsd btc btn bwp byn byr bzd cad cdf chf clf clp cny cop crc cuc
cup cve czk djf dkk dop dzd egp ern etb eur fjd fkp gbp gel ggp ghs gip gmd gnf
gtq gyd hkd hnl hrk htg huf idr ils imp inr iqd irr isk jep jmd jod jpy kes kgs
khr kmf kpw krw kwd kyd kzt lak lbp lkr lrd lsl lvl lyd mad mdl mga mkd mmk mnt
mop mro mur mvr mwk mxn myr mzn nad ngn nio nok npr nzd omr pab pen pgk php pkr
pln pyg qar ron rsd rub rwf sar sbd scr sdg sek sgd shp sll sos srd std svc syp
szl thb tjs tmt tnd top try ttd twd tzs uah ugx usd uyu uzs vef vnd vuv wst xaf
xag xcd xdr xof xpf yer zar zmk zmw zwl) # 166 currencies



case $1 in
		"help"|"h"|"-h"|"--help"|"list"|"l"|"-l"|"--list")
			if [ -f utils/.help ] || [ -f .help ]; then
    		echo -e "Please, try one of the valid arguments bellow\n"
    		< utils/.help tr ' ' ' ' | pr -t -1
			fi
			exit 1
esac

if ! [[ $1 =~ ^[[:digit:]].?+$ ]]; then
	echo "[AMOUNT] not valid" 1>&2
	echo "Has to be decimal" 1>&2
	echo -e "\n"
	exit 1
fi	


# check if parameters are inputed

if [ -z "$2" ] || [ -z "$1" ] || [ -z "$3" ]; then 
    echo "Usage: <alias> [AMOUNT] [FROM_CURRENCY] {TO_CURRENCY}" 1>&2
    echo -e "\n" 1>&2
	exit 1
fi

amount=$1
from_currency=$2
shift; shift
to_currencies=($@)

# check if arguments are valid

found_from=false

declare -a TOs
declare -i count=0

for i in ${currencies[@]}
do  
	if [ "$from_currency" = "$i" ]; then
		found_from=true
	fi
done

if [ "$found_from" = false ]; then
	echo "[FROM_CURRENCY] not valid" 1>&2
	echo "type <alias> help for valid currencies" 1>&2
	echo -e "\n"
	exit 1
fi

for i in ${to_currencies[@]}
do
	for j in ${currencies[@]}
	do
		to_found=false
		if [ "$i" = "$j" ]; then
		to_found=true; break
		fi
	done
	if [ $to_found = false ]; then
		echo "[TO_CURRENCY] not valid" 1>&2
		echo "type <alias> help for valid currencies" 1>&2
		echo -e "\n"
		exit 1
	fi
done

from_currency=$( echo $from_currency | tr '[:lower:]' '[:upper:]' )

declare -i position=0
for curr in ${to_currencies[@]}
do
	curr=$( echo $curr | tr '[:lower:]' '[:upper:]' )
	IDs[$position]="$from_currency""_""$curr"
	position+=1
	IDs[$position]=","
	position+=1
done
unset IDs[$(expr $position - 1)]

declare -i length=${#to_currencies[@]}
declare -a rates
declare request

for i in ${IDs[@]}
do
	request=$request"$i"
done

get=$(curl --silent https://free.currconv.com/api/v7/convert\?q\=${request}\&compact\=ultra\&apiKey\=${API_KEY})

rates=($(echo $get | egrep -o '*[0-9.]*[0-9]'))

for ((i=0; i < length; i++))
do
		echo "$from_currency" "to" "$(echo ${to_currencies[$i]} | tr '[:lower:]' '[:upper:]')"":" $(echo "${rates[$i]} * $amount" | bc)""
done

